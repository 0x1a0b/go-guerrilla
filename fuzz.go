// +build gofuzz

package guerrilla

import (
	"bufio"
	"bytes"
	"fmt"
	"io"
	"sync"

	"github.com/flashmob/go-guerrilla/backends"
	"github.com/flashmob/go-guerrilla/log"
	"github.com/flashmob/go-guerrilla/mocks"
	"time"
)

var logOff log.Logger
var fuzzServer *server

func init() {
	sc := getFuzzServerConfig()
	logOff, _ = log.GetLogger(sc.LogFile)
	fuzzServer = getFuzzServer(sc)
	isFuzzDebug = false

}

func getFuzzServerConfig() *ServerConfig {
	sc := &ServerConfig{
		IsEnabled:       true, //
		Hostname:        "fuzzme.test.com",
		MaxSize:         1024, // smtp message max size
		PrivateKeyFile:  "./tests/mail.guerrillamail.com.key.pem",
		PublicKeyFile:   "./tests/mail.guerrillamail.com.cert.pem",
		Timeout:         5,
		ListenInterface: "127.0.0.1:2529",
		StartTLSOn:      true,
		TLSAlwaysOn:     false,
		MaxClients:      3000,
		LogFile:         "off",
	}
	return sc
}

// getMockServer gets a new server using sc. Server will be using a using the dummy backend
// RCP TO command only allows test.com host
func getFuzzServer(sc *ServerConfig) *server {
	var logOpenError error
	var mainlog log.Logger
	mainlog, logOpenError = log.GetLogger(sc.LogFile)
	if logOpenError != nil {
		mainlog.WithError(logOpenError).Errorf("Failed creating a logger for mock conn [%s]", sc.ListenInterface)
	}
	backend, err := backends.New("dummy", backends.BackendConfig{"log_received_mails": true}, mainlog)
	if err != nil {
		//t.Error("new dummy backend failed because:", err)
	}
	server, err := newServer(sc, backend, mainlog)
	if err != nil {
		//t.Error("new server failed because:", err)
	} else {
		server.setAllowedHosts([]string{"test.com"})
	}

	return server
}

var mockClient *client
var isFuzzDebug bool

// Fuzz passes the data to the mock connection
// Data is random input generated by go-fuzz, note that in most cases it is invalid.
// The function must return 1 if the fuzzer should increase priority of the given input during subsequent
// fuzzing (for example, the input is lexically correct and was parsed successfully); -1 if the input must
// not be added to corpus even if gives new coverage; and 0 otherwise
func Fuzz(data []byte) int {

	var wg sync.WaitGroup
	isFuzzDebug := true
	// grab a new mocked tcp connection, it consists of two pipes (io.Pipe)
	conn := mocks.NewConn()

	// Get a client from the pool
	poolable, err := fuzzServer.clientPool.Borrow(conn.Server, 1, logOff)
	if c, ok := poolable.(*client); !ok {
		panic("cannot borrow from pool")
	} else {
		mockClient = c
	}

	defer func() {
		// wait for handleClient to exit
		wg.Wait()
		// return to the pool
		fuzzServer.clientPool.Return(mockClient)
	}()

	wg.Add(1)
	go func() {
		fuzzServer.handleClient(mockClient)
		wg.Done()
	}()
	// Get the greeting from the server
	r := bufio.NewReader(conn.Client)
	line, _ := r.ReadString('\n')
	if isFuzzDebug {
		fmt.Println(line)
	}

	// Feed the connection with fuzz data (we are the _client_ end of the connection)
	bw := bufio.NewWriter(conn.Client)

	if _, err = io.Copy(bw, bytes.NewReader(data)); err != nil {
		panic(err)
	}
	if err = bw.Flush(); err != nil {
		panic(err)
	}

	time.Sleep(time.Millisecond * 1)

	ret := 1

	for {

		if line, err = r.ReadString('\n'); err != nil {
			panic(err)
			break
		} else if isFuzzDebug {
			fmt.Print(line)

		}
		//fmt.Println(r.Buffered(), mockClient.bufout.Buffered())
		if r.Buffered() == 0 && mockClient.bufout.Buffered() == 0 {
			conn.Close()
			break
		}
		if mockClient.bufout.Buffered() > 0 {
			// looks like the client still hasn't processed our command(s)
			time.Sleep(time.Millisecond * 1)
		}

	}

	return ret
}
